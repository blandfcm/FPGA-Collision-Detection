
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY,
	SW
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;
input 		          		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] rst_reg;
wire [31:0] x1_reg;
wire [31:0] y1_reg;
wire [31:0] z1_reg;
wire [31:0] r1_reg;
wire [31:0] x2_reg;
wire [31:0] y2_reg;
wire [31:0] z2_reg;
wire [31:0] r2_reg, g1c, g2c;
wire [31:0] outs [8:0];
wire [31:0] check1;
wire [31:0] check2;
wire [31:0] check3;
wire [31:0] check4;
wire key0;
wire ret_val, done_flag;
wire rst_data;
reg rst_wire;
reg [31:0] counter = 31'b0;
reg [31:0] debug = 31'b0;
reg reset = 1'b1;
reg flag = 1'b0;

wire [31:0] rst_reg2;
wire [31:0] x1_reg2;
wire [31:0] y1_reg2;
wire [31:0] z1_reg2;
wire [31:0] r1_reg2;
wire [31:0] x2_reg2;
wire [31:0] y2_reg2;
wire [31:0] z2_reg2;
wire [31:0] r2_reg2, g1c2, g2c2;
wire [31:0] outs2 [8:0];
wire [31:0] check5;
wire [31:0] check6;
wire [31:0] check7;
wire [31:0] check8;
reg [31:0] counter2 = 31'b0;
reg [31:0] debug2 = 31'b0;

wire [31:0] rst_reg3;
wire [31:0] x1_reg3;
wire [31:0] y1_reg3;
wire [31:0] z1_reg3;
wire [31:0] r1_reg3;
wire [31:0] x2_reg3;
wire [31:0] y2_reg3;
wire [31:0] z2_reg3;
wire [31:0] r2_reg3, g1c3, g2c3;
wire [31:0] outs3 [8:0];
wire [31:0] check9;
wire [31:0] check10;
wire [31:0] check11;
wire [31:0] check12;
reg [31:0] counter3 = 31'b0;
reg [31:0] debug3 = 31'b0;

wire [31:0] rst_reg4;
wire [31:0] x1_reg4;
wire [31:0] y1_reg4;
wire [31:0] z1_reg4;
wire [31:0] r1_reg4;
wire [31:0] x2_reg4;
wire [31:0] y2_reg4;
wire [31:0] z2_reg4;
wire [31:0] r2_reg4, g1c4, g2c4;
wire [31:0] outs4 [8:0];
wire [31:0] check13;
wire [31:0] check14;
wire [31:0] check15;
wire [31:0] check16;
reg [31:0] counter4 = 31'b0;
reg [31:0] debug4 = 31'b0;

// jtag signals
assign key0 = ~KEY[0];


//=======================================================
//  Structural coding
//=======================================================

jtag_tx jtag0( .out_data(x1_reg) );
					 
jtag_tx jtag1( .out_data(y1_reg) );
					 
jtag_tx jtag2( .out_data(z1_reg) );
					 
jtag_tx jtag3( .out_data(r1_reg) );		
					 
jtag_tx jtag4( .out_data(x2_reg) );
					 
jtag_tx jtag5( .out_data(y2_reg) );
					 
jtag_tx jtag6( .out_data(z2_reg) );			
					 
jtag_tx jtag7( .out_data(r2_reg) );	

jtag_tx jtag8( .out_data(x1_reg2) );
				 
jtag_tx jtag9( .out_data(y1_reg2) );
					 
jtag_tx jtag10( .out_data(z1_reg2) );
					 
jtag_tx jtag11( .out_data(r1_reg2) );		
					 
jtag_tx jtag12( .out_data(x2_reg2) );
					 
jtag_tx jtag13( .out_data(y2_reg2) );
					 
jtag_tx jtag14( .out_data(z2_reg2) );			
					 
jtag_tx jtag15( .out_data(r2_reg2) );	

jtag_tx jtag16( .out_data(x1_reg3) );
				 
jtag_tx jtag17( .out_data(y1_reg3) );
					 
jtag_tx jtag18( .out_data(z1_reg3) );
					 
jtag_tx jtag19( .out_data(r1_reg3) );		
					 
jtag_tx jtag20( .out_data(x2_reg3) );
					 
jtag_tx jtag21( .out_data(y2_reg3) );
					 
jtag_tx jtag22( .out_data(z2_reg3) );			
					 
jtag_tx jtag23( .out_data(r2_reg3) );	

jtag_tx jtag24( .out_data(x1_reg4) );
				 
jtag_tx jtag25( .out_data(y1_reg4) );
					 
jtag_tx jtag26( .out_data(z1_reg4) );
				 
jtag_tx jtag27( .out_data(r1_reg4) );		
					 
jtag_tx jtag28( .out_data(x2_reg4) );
					 
jtag_tx jtag29( .out_data(y2_reg4) );
					 
jtag_tx jtag30( .out_data(z2_reg4) );			
					 
jtag_tx jtag31( .out_data(r2_reg4) );	

jtag_tx jtag32( .out_data(rst_reg) );

jtag_debug jtag33(.in_debug(outs[0]));
jtag_debug jtag34(.in_debug(outs[1]));
jtag_debug jtag35(.in_debug(outs[2]));
jtag_debug jtag36(.in_debug(outs[3]));
jtag_debug jtag37(.in_debug(outs[4]));
jtag_debug jtag38(.in_debug(outs[5]));
jtag_debug jtag39(.in_debug(outs[6]));
jtag_debug jtag40(.in_debug(outs[7]));
jtag_debug jtag41(.in_debug(outs[8]));
jtag_debug jtag42(.in_debug(debug));

jtag_debug jtag43(.in_debug(outs2[0]));
jtag_debug jtag44(.in_debug(outs2[1]));
jtag_debug jtag45(.in_debug(outs2[2]));
jtag_debug jtag46(.in_debug(outs2[3]));
jtag_debug jtag47(.in_debug(outs2[4]));
jtag_debug jtag48(.in_debug(outs2[5]));
jtag_debug jtag49(.in_debug(outs2[6]));
jtag_debug jtag50(.in_debug(outs2[7]));
jtag_debug jtag51(.in_debug(outs2[8]));
jtag_debug jtag52(.in_debug(debug2));

jtag_debug jtag53(.in_debug(outs2[0]));
jtag_debug jtag54(.in_debug(outs2[1]));
jtag_debug jtag55(.in_debug(outs2[2]));
jtag_debug jtag56(.in_debug(outs2[3]));
jtag_debug jtag57(.in_debug(outs2[4]));
jtag_debug jtag58(.in_debug(outs2[5]));
jtag_debug jtag59(.in_debug(outs2[6]));
jtag_debug jtag60(.in_debug(outs2[7]));
jtag_debug jtag61(.in_debug(outs2[8]));
jtag_debug jtag62(.in_debug(debug3));

jtag_debug jtag63(.in_debug(outs3[0]));
jtag_debug jtag64(.in_debug(outs3[1]));
jtag_debug jtag65(.in_debug(outs3[2]));
jtag_debug jtag66(.in_debug(outs3[3]));
jtag_debug jtag67(.in_debug(outs3[4]));
jtag_debug jtag68(.in_debug(outs3[5]));
jtag_debug jtag69(.in_debug(outs3[6]));
jtag_debug jtag70(.in_debug(outs3[7]));
jtag_debug jtag71(.in_debug(outs3[8]));
jtag_debug jtag72(.in_debug(debug4));





dCollideSpheres test0(
	.x1(x1_reg), 
	.y1(y1_reg), 
	.z1(z1_reg), 
	.r1(r1_reg), 
	.x2(x2_reg), 
	.y2(y2_reg), 
	.z2(z2_reg), 
	.r2(r2_reg), 	
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(rst_reg[0]), 
	.done(outs[8]),
	.test(check1),
	.test2(check2),
	.test3(check3),
   .test4(check4)
);
dCollideSpheres test1(
	.x1(x1_reg2), 
	.y1(y1_reg2), 
	.z1(z1_reg2), 
	.r1(r1_reg2), 
	.x2(x2_reg2), 
	.y2(y2_reg2), 
	.z2(z2_reg2), 
	.r2(r2_reg2), 	
	.cx(outs2[0]), 
	.cy(outs2[1]), 
	.cz(outs2[2]), 
	.normalx(outs2[3]), 
	.normaly(outs2[4]), 
	.normalz(outs2[5]), 
	.depth(outs2[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs2[7]), 
	.clk(CLOCK_50), 
	.rst(rst_reg[0]), 
	.done(outs2[8]),
	.test(check5),
	.test2(check6),
	.test3(check7),
   .test4(check8)
);
dCollideSpheres test2(
	.x1(x1_reg3), 
	.y1(y1_reg3), 
	.z1(z1_reg3), 
	.r1(r1_reg3), 
	.x2(x2_reg3), 
	.y2(y2_reg3), 
	.z2(z2_reg3), 
	.r2(r2_reg3), 	
	.cx(outs3[0]), 
	.cy(outs3[1]), 
	.cz(outs3[2]), 
	.normalx(outs3[3]), 
	.normaly(outs3[4]), 
	.normalz(outs3[5]), 
	.depth(outs3[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs3[7]), 
	.clk(CLOCK_50), 
	.rst(rst_reg[0]), 
	.done(outs3[8]),
	.test(check9),
	.test2(check10),
	.test3(check11),
   .test4(check12)
);

dCollideSpheres test3(
	.x1(x1_reg4), 
	.y1(y1_reg4), 
	.z1(z1_reg4), 
	.r1(r1_reg4), 
	.x2(x2_reg4), 
	.y2(y2_reg4), 
	.z2(z2_reg4), 
	.r2(r2_reg4), 	
	.cx(outs4[0]), 
	.cy(outs4[1]), 
	.cz(outs4[2]), 
	.normalx(outs4[3]), 
	.normaly(outs4[4]), 
	.normalz(outs4[5]), 
	.depth(outs4[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs4[7]), 
	.clk(CLOCK_50), 
	.rst(rst_reg[0]), 
	.done(outs4[8]),
	.test(check13),
	.test2(check14),
	.test3(check15),
   .test4(check16)
);

always @(posedge CLOCK_50 or negedge rst_reg[0])
begin
if(rst_reg[0] == 1'b0)
begin
	counter <= 32'd0;
	counter2 <= 32'd0;
	counter3 <= 32'd0;
	counter4 <= 32'd0;
end
else
begin
	if(outs[8] == 1'b1)
	begin
		debug <= counter;	
	end
	else
	begin
		counter <= counter + 1;
	end
	if(outs2[8] == 1'b1)
	begin
		debug2 <= counter2;	
	end
	else
	begin
		counter2 <= counter2 + 1;
	end	
	if(outs3[8] == 1'b1)
	begin
		debug3 <= counter3;	
	end
	else
	begin
		counter3 <= counter3 + 1;
	end	
	if(outs4[8] == 1'b1)
	begin
		debug4 <= counter4;	
	end
	else
	begin
		counter4 <= counter4 + 1;
	end		
end

		
end	




endmodule
