
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FPGA_DCOLLIDE_MEMORY(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// RS232 //////////
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	GPIO 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// RS232 //////////
input 		          		UART_CTS;
output		          		UART_RTS;
input 		          		UART_RXD;
output		          		UART_TXD;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout 		    [35:0]		GPIO;


//=======================================================
//  REG/WIRE declarations
//=======================================================

//=================== RESET CONTROL =====================
wire rstOut_w;
wire [3:0] state_w;
//=================== RESET CONTROL =====================

// ====================== MEMORY ========================
               
wire [31:0] outaddress_w;                       
wire [31:0] datain_mem_w;                        
wire [31:0] dataout1_mem_w;                     
wire [31:0] dataout2_mem_w;                     
wire [31:0] dataout3_mem_w;                     
wire [31:0] dataout4_mem_w;                     
wire [31:0] dataout5_mem_w;                     
wire [31:0] dataout6_mem_w;                     
wire [31:0] dataout7_mem_w;                     
wire [31:0] dataout8_mem_w;                     
wire cs_w;                                       
wire oe_w;                                      
wire fm_w;
wire write_done_w;
reg signed [31:0] inaddress_reg = -32'd1;                                     
reg signed [31:0] inaddress_reg_aux = -32'd1; 
reg we_reg;                                        
// ====================== MEMORY ========================

// ======================= JTAG =========================
wire rdyData;
// ======================= JTAG =========================

//================== DCOLLIDESPHERES ====================
wire [31:0] outs [8:0];
wire done_w;
wire [31:0] check1;
wire [31:0] check2;
wire [31:0] check3;
wire [31:0] check4;
//================== DCOLLIDESPHERES ====================

//=======================================================
//  Structural coding
//=======================================================
assign cs_w = 1'b1;
assign LEDG[5:1] = outaddress_w;
assign LEDG[7] = oe_w;
assign LEDG[6] = fm_w;
assign LEDG[0] = rstOut_w;

jtag_tx_rdy jtag0(
	.out_data(datain_mem_w),
	.out_rdy(rdyData)
);

/*jtag_debug jtag11(
 .in_debug(dataout1_mem_w)
);
jtag_debug jtag21(
 .in_debug(dataout2_mem_w)
);
jtag_debug jtag31(
 .in_debug(dataout3_mem_w)
);
jtag_debug jtag41(
 .in_debug(dataout4_mem_w)
);
jtag_debug jtag51(
 .in_debug(dataout5_mem_w)
);
jtag_debug jtag61(
 .in_debug(dataout6_mem_w)
);
jtag_debug jtag71(
 .in_debug(dataout7_mem_w)
);
jtag_debug jtag81(
 .in_debug(dataout8_mem_w)
);*/

jtag_debug jtag11(
 .in_debug(outs[0])
);
jtag_debug jtag21(
 .in_debug(outs[1])
);
jtag_debug jtag31(
 .in_debug(outs[2])
);
jtag_debug jtag41(
 .in_debug(outs[3])
);
jtag_debug jtag51(
 .in_debug(outs[4])
);
jtag_debug jtag61(
 .in_debug(outs[5])
);
jtag_debug jtag71(
 .in_debug(outs[6])
);
jtag_debug jtag81(
 .in_debug(outs[7])
);

rst_Ctrl reset(
	.rst(KEY[1]),//done_w should reset
	.cs(fm_w),
	.clk(KEY[0]),
	.rstOut(rstOut_w)
);

ram_sp_sr_sw memory(
	.clk(CLOCK_50)         , // Clock Input
	.addressin(inaddress_reg)     , // Address Input
	.addressout(outaddress_w)     , // Address Output
	.datain(datain_mem_w)        , // Data bi-directional
	.dataout0(dataout1_mem_w),		
	.dataout1(dataout2_mem_w),		
	.dataout2(dataout3_mem_w),		
	.dataout3(dataout4_mem_w),		
	.dataout4(dataout5_mem_w),		
	.dataout5(dataout6_mem_w),		
	.dataout6(dataout7_mem_w),		
	.dataout7(dataout8_mem_w),		
	.cs(cs_w)          , // Chip Select
	.we(rdyData)          , // Write Enable/Read Enable
	.oe(oe_w)          , // Output Enable
	.fm(fm_w)          , // Output Enable
	.write_done(write_done_w)
); 

memoryController memcontrol(
		.rst(fm_w),
		.fetch_data_ready(KEY[1]),
		.end_of_memory(end_of_memory_w),
		.address(outaddress_w),
		.output_enable(oe_w)		
);

dCollideSpheres test0(
	.x1(dataout1_mem_w), 
	.y1(dataout2_mem_w), 
	.z1(dataout3_mem_w), 
	.r1(dataout4_mem_w), 
	.x2(dataout5_mem_w), 
	.y2(dataout6_mem_w), 
	.z2(dataout7_mem_w), 
	.r2(dataout8_mem_w), 	
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(rstOut_w), 
	.done(done_w),
	.test(check1),
	.test2(check2),
	.test3(check3),
	.test4(check4)
);

always @(posedge rdyData or posedge write_done_w)
begin
	if(write_done_w == 1'b1)
	begin
		we_reg <= 0;
	end else
	begin
		if(inaddress_reg < 31)
		begin
			inaddress_reg <= inaddress_reg + 1;
			inaddress_reg_aux <= 32'd32;
			we_reg <= 1;
		end
	end
end



endmodule
