
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;


//=======================================================
//  REG/WIRE declarations
//=======================================================

reg[31:0] p1x;
reg[31:0] p1y;
reg[31:0] p1z;
reg[31:0] p1r;
reg[31:0] p2x;
reg[31:0] p2y;
reg[31:0] p2z;
reg[31:0] p2r, g1c, g2c;
wire[31:0] outs [8:0];
wire[31:0] check;
wire ret_val, done_flag;
reg rst_wire;
reg [3:0] counter = 4'b0;

// jtag signals

reg  tdo;
reg [31:0]shift_dr_in;
wire [2:0]ir_in; //IR command register
wire tck, tdi;
wire cdr, eldr, e2dr, pdr, sdr, udr, uir, cir, tms;

//=======================================================
//  Structural coding
//=======================================================

dCollideSpheres test0(
	.x1(32'b10111110111111000100011101011110), 
	.y1(32'b00000000000000000000000000000000), 
	.z1(32'b00111111110000000000000000000000), 
	.r1(32'b00111111000000000000000000000000), 
	.x2(32'b00111110111111000100011101011110), 
	.y2(32'b00000000000000000000000000000000), 
	.z2(32'b00111111110000000000000000000000), 
	.r2(32'b00111111000000000000000000000000), 
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'b00111111011110101110000101001000), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(rst_wire), 
	.done(outs[8]),
	.test(check)
);

myjtag myjtag_inst(
	.tdo (tdo),
	.tck (tck),
	.tdi (tdi),
	.ir_in(ir_in),
	.ir_out(),
	.virtual_state_cdr (cdr),
	.virtual_state_e1dr(e1dr),
	.virtual_state_e2dr(e2dr),
	.virtual_state_pdr (pdr),
	.virtual_state_sdr (sdr),
	.virtual_state_udr (udr),
	.virtual_state_uir (uir),
	.virtual_state_cir (cir)
	);
	
always @(posedge tck)
	if(sdr && (ir_in==3'b001) )
	begin
		shift_dr_in <= { tdi, shift_dr_in[31:1] };
	end

//data receiver
//write received data (during PUSH command) into LED register 
always @(posedge tck)
begin
	if(reset == 1'b1)
		reset <= 1'b0;
	if(udr && (ir_in==3'b001) )
	begin
		reset <=1'b1;	
		p1x <= shift_dr_in;
	end
end
//data sender
reg [31:0]shift_dr_out;
always @(posedge tck)
	if(cdr && (ir_in==3'b010) )
		//capture data for send during command POP
		shift_dr_out <= outs[counter];
		counter <= counter + 1;
	else
	if(sdr && (ir_in==3'b010) )
		//shift out data durng command POP
		shift_dr_out <= { tdi, shift_dr_out[31:1] };

//pass or bypass data via tdo reg
always @*
begin
	case(ir_in)
	4'b001: tdo = shift_dr_in [0];
	4'b010: tdo = shift_dr_out[0];
	default:
			  tdo = tdi;
	endcase
end

endmodule
