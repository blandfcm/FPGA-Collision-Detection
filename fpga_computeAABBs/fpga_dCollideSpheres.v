
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY,
	SW
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;
input 		          		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] rst_reg;
wire [31:0] x_reg;
wire [31:0] y_reg;
wire [31:0] z_reg;
wire [31:0] r_reg;
wire [31:0] side0_reg, side1_reg, side2_reg;
wire [31:0] lz_reg;
wire [31:0] r0_reg, r1_reg, r2_reg, r4_reg, r5_reg, r6_reg, r8_reg, r9_reg, r10_reg;
wire [31:0] outs [6:0];
wire [31:0] check1;
wire [31:0] check2;
wire [31:0] check3;
wire [31:0] check4;
wire key0;
wire ret_val, done_flag;
wire rst_data;
reg rst_wire;
reg [31:0] counter = 31'b0;
reg [31:0] debug = 31'b0;
reg reset = 1'b1;
reg flag = 1'b0;

// jtag signals
assign key0 = ~KEY[0];


//=======================================================
//  Structural coding
//=======================================================

jtag_tx jtag0( .out_data(x_reg) );					 
jtag_tx jtag1( .out_data(y_reg) );
jtag_tx jtag2( .out_data(z_reg) );
jtag_tx jtag3( .out_data(lz_reg) );
jtag_tx jtag4( .out_data(r_reg) );
jtag_tx jtag5( .out_data(r2_reg) );
jtag_tx jtag6( .out_data(r6_reg) );
jtag_tx jtag7( .out_data(r10_reg) );
jtag_tx jtag8( .out_data(rst_reg) );	
jtag_debug jtag9(.in_debug(outs[0]));			//aabb0
jtag_debug jtag10(.in_debug(outs[1]));			//aabb1
jtag_debug jtag11(.in_debug(outs[2]));			//aabb2
jtag_debug jtag12(.in_debug(outs[3]));			//aabb3
jtag_debug jtag13(.in_debug(outs[4]));			//aabb4
jtag_debug jtag14(.in_debug(outs[5]));			//aabb5
jtag_debug jtag15(.in_debug(outs[6]));			//done
jtag_debug jtag16(.in_debug(debug));

capsule_computeAABB test0(
	.clk(CLOCK_50),
	.rst(rst_reg[0]),
	.x(x_reg), 
	.y(y_reg), 
	.z(z_reg),
	.lz(lz_reg), 
	.radius(r_reg),
	.r2(r2_reg), 
	.r6(r6_reg), 
	.r10(r10_reg),
	.aabb0(outs[0]),
	.aabb1(outs[1]),
	.aabb2(outs[2]),
	.aabb3(outs[3]),
	.aabb4(outs[4]),
	.aabb5(outs[5]),
	.done(outs[6])
);

/* BOX
jtag_tx jtag0( .out_data(x_reg) );					 
jtag_tx jtag1( .out_data(y_reg) );
jtag_tx jtag2( .out_data(z_reg) );
jtag_tx jtag3( .out_data(side0_reg) );
jtag_tx jtag4( .out_data(side1_reg) );
jtag_tx jtag5( .out_data(side2_reg) );
jtag_tx jtag6( .out_data(r0_reg) );
jtag_tx jtag7( .out_data(r1_reg) );
jtag_tx jtag8( .out_data(r2_reg) );
jtag_tx jtag9( .out_data(r4_reg) );
jtag_tx jtag10( .out_data(r5_reg) );
jtag_tx jtag11( .out_data(r6_reg) );
jtag_tx jtag12( .out_data(r8_reg) );
jtag_tx jtag13( .out_data(r9_reg) );
jtag_tx jtag14( .out_data(r10_reg) );
jtag_tx jtag15( .out_data(rst_reg) );	
jtag_debug jtag16(.in_debug(outs[0]));			//aabb0
jtag_debug jtag17(.in_debug(outs[1]));			//aabb1
jtag_debug jtag18(.in_debug(outs[2]));			//aabb2
jtag_debug jtag19(.in_debug(outs[3]));			//aabb3
jtag_debug jtag20(.in_debug(outs[4]));			//aabb4
jtag_debug jtag21(.in_debug(outs[5]));			//aabb5
jtag_debug jtag22(.in_debug(outs[6]));			//done
jtag_debug jtag23(.in_debug(debug));

box_computeAABB test0(
	.clk(CLOCK_50),
	.rst(rst_reg[0]),
	.x(x_reg),
	.y(y_reg),
	.z(z_reg),
	.side0(side0_reg),
	.side1(side1_reg),
	.side2(side2_reg),
	.r0(r0_reg),
	.r1(r1_reg),
	.r2(r2_reg),
	.r4(r4_reg),
	.r5(r5_reg),
	.r6(r6_reg),
	.r8(r8_reg),
	.r9(r9_reg),
	.r10(r10_reg),
	.aabb0(outs[0]),
	.aabb1(outs[1]),
	.aabb2(outs[2]),
	.aabb3(outs[3]),
	.aabb4(outs[4]),
	.aabb5(outs[5]),
	.done(outs[6])
);
*/
/*	SPHERE
jtag_tx jtag0( .out_data(x_reg) );					 
jtag_tx jtag1( .out_data(y_reg) );
jtag_tx jtag2( .out_data(z_reg) );
jtag_tx jtag3( .out_data(r_reg) );
jtag_tx jtag4( .out_data(rst_reg) );	
jtag_debug jtag5(.in_debug(outs[0]));			//aabb0
jtag_debug jtag6(.in_debug(outs[1]));			//aabb1
jtag_debug jtag7(.in_debug(outs[2]));			//aabb2
jtag_debug jtag8(.in_debug(outs[3]));			//aabb3
jtag_debug jtag9(.in_debug(outs[4]));			//aabb4
jtag_debug jtag10(.in_debug(outs[5]));			//aabb5
jtag_debug jtag11(.in_debug(outs[6]));			//done
jtag_debug jtag12(.in_debug(debug));

sphere_computeAABB test0(
	.clk(CLOCK_50),
	.rst(rst_reg[0]),
	.x(x_reg),
	.y(y_reg),
	.z(z_reg),
	.radius(r_reg),
	.aabb0(outs[0]),
	.aabb1(outs[1]),
	.aabb2(outs[2]),
	.aabb3(outs[3]),
	.aabb4(outs[4]),
	.aabb5(outs[5]),
	.done(outs[6])
);*/

/*
dCollideSpheres test0(
	.x1(x1_reg), 
	.y1(y1_reg), 
	.z1(z1_reg), 
	.r1(r1_reg), 
	.x2(x2_reg), 
	.y2(y2_reg), 
	.z2(z2_reg), 
	.r2(r2_reg), 	
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(rst_reg[0]), 
	.done(outs[8]),
	.test(check1),
	.test2(check2),
	.test3(check3),
   .test4(check4)
);
*/

always @(posedge CLOCK_50 or negedge rst_reg[0])
begin
if(rst_reg[0] == 1'b0)
begin
	counter <= 32'd0;
end
else
begin
	if(outs[6] == 1'b1)
	begin
		debug <= counter;	
	end
	else
	begin
		counter <= counter + 1;
	end
end

		
end	




endmodule
