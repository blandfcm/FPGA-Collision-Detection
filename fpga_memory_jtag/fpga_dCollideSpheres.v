
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY,
	SW
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;
input 		          		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] rst_reg;
wire [31:0] x1_reg;
wire [31:0] y1_reg;
wire [31:0] z1_reg;
wire [31:0] r1_reg;
wire [31:0] x2_reg;
wire [31:0] y2_reg;
wire [31:0] z2_reg;
wire [31:0] r2_reg, g1c, g2c;
wire [31:0] outs [8:0];
wire [31:0] check1;
wire [31:0] check2;
wire [31:0] check3;
wire [31:0] check4;
wire key0;
wire ret_val, done_flag;
wire rst_data;
reg rst_wire;
reg [31:0] counter = 31'b0;
reg [31:0] debug = 31'b0;
reg reset = 1'b1;
reg flag = 1'b0;
wire [31:0] countrdy;
wire rdyData;
// jtag signals
assign key0 = ~KEY[0];
wire [31:0] datain_mem_w;
wire [31:0] dataout_mem_w;
wire we_w;

reg [7:0] addressreg;

//=======================================================
//  Structural coding
//=======================================================

jtag_tx_rdy jtag0(
	.out_data(datain_mem_w),
	.count(countrdy),
	.out_rdy(rdyData)
);

jtag_debug jtag1(
	.in_debug(dataout_mem_w)
);
jtag_debug jtag2(
	.in_debug(counter)
);

ram_sp_sr_sw (
.clk(CLOCK_50)         , // Clock Input
.address(counter)     , // Address Input
.datain(datain_mem_w)        , // Data bi-directional
.dataout(dataout_mem_w),
.cs(1'b1)          , // Chip Select
.we(rdyData)          , // Write Enable/Read Enable
.oe(SW)            // Output Enable
); 


always @(posedge KEY[0])
begin
	//if (KEY[0])
	//begin
	//	counter <= 0;
	//end
	if(counter == 32'd7)
	begin
		counter <= 0;
	end else
	begin
		counter <= counter + 1;
	end
	//else
	//	counter <= counter;
	//if(rdyData)
	//	counter <= counter + 1;
end	




endmodule
