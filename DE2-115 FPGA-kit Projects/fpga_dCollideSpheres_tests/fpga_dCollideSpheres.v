
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY,
	SW
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;
input 		          		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] x1_reg;
wire [31:0] y1_reg;
wire [31:0] z1_reg;
wire [31:0] r1_reg;
wire [31:0] x2_reg;
wire [31:0] y2_reg;
wire [31:0] z2_reg;
wire [31:0] r2_reg;
wire [31:0] outs [8:0];


//=======================================================
//  Structural coding
//=======================================================

jtag_rxtx jtag0( .in_data(d),
					 .out_data(x1_reg) );
					 
jtag_rxtx jtag1( .in_data(outs[1]),
					 .out_data(y1_reg) );
					 
jtag_rxtx jtag2( .in_data(outs[2]),
					 .out_data(z1_reg) );
					 
jtag_rxtx jtag3( .in_data(outs[3]),
					 .out_data(r1_reg) );		
					 
jtag_rxtx jtag4( .in_data(outs[4]),
					 .out_data(x2_reg) );
					 
jtag_rxtx jtag5( .in_data(outs[5]),
					 .out_data(y2_reg) );
					 
jtag_rxtx jtag6( .in_data(outs[6]),
					 .out_data(z2_reg) );			
					 
jtag_rxtx_rdy jtag7( .in_data(outs[7]),
					 .out_data(r2_reg),
					 .out_rdy(rst_data));	
				
wire[31:0] d;
wire CLK_d;
dCalcPointsDistance3 dCalcPointsDist0(
	.CLK(CLOCK_50),
	.a1(x1_reg),
	.a2(y1_reg),
	.a3(z1_reg),
	.b1(x2_reg),
	.b2(y2_reg),
	.b3(z2_reg),
	.RST(SW),
	.res(d),
	.out_rdy(CLK_d)
);		




endmodule
