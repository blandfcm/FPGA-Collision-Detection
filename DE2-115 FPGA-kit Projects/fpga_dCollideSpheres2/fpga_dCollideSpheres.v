
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [31:0] x1_reg;
wire [31:0] y1_reg;
wire [31:0] z1_reg;
wire [31:0] r1_reg;
wire [31:0] x2_reg;
wire [31:0] y2_reg;
wire [31:0] z2_reg;
wire [31:0] r2_reg, g1c, g2c;
wire [31:0] outs [8:0];
wire [31:0] check;
wire key0;
wire ret_val, done_flag;
wire rst_data;
reg rst_wire;
reg [3:0] counter = 4'b0;
reg reset = 1'b1;
reg flag = 1'b0;

// jtag signals
assign key0 = ~KEY[0];


//=======================================================
//  Structural coding
//=======================================================

jtag_rxtx jtag0( .in_data(outs[0]),
					 .out_data(x1_reg) );
					 
jtag_rxtx jtag1( .in_data(outs[1]),
					 .out_data(y1_reg) );
					 
jtag_rxtx jtag2( .in_data(outs[2]),
					 .out_data(z1_reg) );
					 
jtag_rxtx jtag3( .in_data(outs[3]),
					 .out_data(r1_reg) );		
					 
jtag_rxtx jtag4( .in_data(outs[4]),
					 .out_data(x2_reg) );
					 
jtag_rxtx jtag5( .in_data(outs[5]),
					 .out_data(y2_reg) );
					 
jtag_rxtx jtag6( .in_data(outs[6]),
					 .out_data(z2_reg) );			
					 
jtag_rxtx_rdy jtag7( .in_data(outs[7]),
					 .out_data(r2_reg),
					 .out_rdy(rst_data));			

dCollideSpheres test0(
	.x1(32'b10111110111111000100011101011110), 
	.y1(32'b00000000000000000000000000000000), 
	.z1(32'b00111111110000000000000000000000), 
	.r1(32'b00111111000000000000000000000000), 
	.x2(32'b00111110111111000100011101011110), 
	.y2(32'b00000000000000000000000000000000), 
	.z2(32'b00111111110000000000000000000000), 
	.r2(32'b00111111000000000000000000000000), 
/*	.x1(x1_reg), 
	.y1(y1_reg), 
	.z1(z1_reg), 
	.r1(r1_reg), 
	.x2(x2_reg), 
	.y2(y2_reg), 
	.z2(z2_reg), 
	.r2(r2_reg), 	*/
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'd1), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(key0), 
	.done(outs[8]),
	.test(check)
);

/*always @(posedge CLOCK_50 or posedge rst_data)
begin
	if(rst_data)
	begin
		flag <= 1'b1;
	end
	case (counter)
	4'd0: 
	begin
		if(flag == 1'b1)
		begin
			counter <= counter + 1;
			reset <= 0;
		end
	end
	4'd1: 
	begin
		counter <= counter + 1;
		reset <= 1;
	end
	4'd2: 
	begin
		counter <= counter + 1;
		reset <= 0;
	end
	4'd3: 
	begin
		counter <= counter + 1;
		reset <= 1;
	end
	4'd4: 
	begin
		counter <= counter + 1;
		reset <= 0;
	end
	4'd5: 
	begin
		counter <= counter + 1;
		reset <= 1;
	end	
endcase
end*/

/*always @(posedge CLOCK_50)
begin
	if(reset == 1'b1 & flag == 1'b0)
	begin
		reset = 1'b0;
		flag = 1'b1;
	end
	else if(reset == 1'b0 & flag == 1'b1)
	begin
		reset = 1'b1;
	end
	else
	begin
		reset = 1'b0;
	end
end*/


endmodule
