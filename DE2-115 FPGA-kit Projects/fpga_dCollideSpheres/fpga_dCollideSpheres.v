
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_dCollideSpheres(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;


//=======================================================
//  REG/WIRE declarations
//=======================================================

reg[31:0] p1x;
reg[31:0] p1y;
reg[31:0] p1z;
reg[31:0] p1r;
reg[31:0] p2x;
reg[31:0] p2y;
reg[31:0] p2z;
reg[31:0] p2r, g1c, g2c;
wire[31:0] outs [8:0];
wire[31:0] check;
wire ret_val, done_flag;
reg rst_wire;
reg [3:0] counter = 4'b0;
reg reset;

// jtag signals



//=======================================================
//  Structural coding
//=======================================================

dCollideSpheres test0(
	.x1(32'b10111110111111000100011101011110), 
	.y1(32'b00000000000000000000000000000000), 
	.z1(32'b00111111110000000000000000000000), 
	.r1(32'b00111111000000000000000000000000), 
	.x2(32'b00111110111111000100011101011110), 
	.y2(32'b00000000000000000000000000000000), 
	.z2(32'b00111111110000000000000000000000), 
	.r2(32'b00111111000000000000000000000000), 
	.cx(outs[0]), 
	.cy(outs[1]), 
	.cz(outs[2]), 
	.normalx(outs[3]), 
	.normaly(outs[4]), 
	.normalz(outs[5]), 
	.depth(outs[6]), 
	.g1(32'b00111111011110101110000101001000), 
	.g2(32'd1), 
	.ret(outs[7]), 
	.clk(CLOCK_50), 
	.rst(1'b0), 
	.done(outs[8]),
	.test(check)
);



endmodule
