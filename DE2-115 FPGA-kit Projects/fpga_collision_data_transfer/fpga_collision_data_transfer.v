
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module fpga_collision_data_transfer(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [7:0]  in_data_reg1;
wire [7:0] out_data_reg1;
wire  out_rdy_reg1;

wire [7:0] inout_data;
reg [31:0] counterin1 = 4'd0;
wire [7:0] dataout;

reg cs_reg = 1'b0;
reg we_reg = 1'b0;
reg oe_reg = 1'b0;

reg [4:0] state = 4'b0;
reg [4:0] NS = 4'b0;

reg [31:0] address_reg = 32'b0;

wire rst;

//=======================================================
//  Structural coding
//=======================================================

assign dataout = (cs_reg & we_reg) ? out_data_reg1:8'bz;
assign rst = ~KEY[0];


jtag_rxtx_rdy jtag0(
  .in_data( in_data_reg1),
 .out_data(out_data_reg1),
  .out_rdy( out_rdy_reg1)
);

ram_sp_sr_sw (
.clk(CLOCK_50)         , // Clock Input
.address(address_reg)     , // Address Input
.data(dataout)        , // Data bi-directional
.cs(cs_reg)          , // Chip Select
.we(we_reg)          , // Write Enable/Read Enable
.oe(oe_reg)            // Output Enable
); 

always@(posedge CLOCK_50 or posedge out_rdy_reg1 )
	begin
		
		if(out_rdy_reg1 == 1'b1)
		begin
			state <= 1'b1;
			//address_reg <= address_reg + 1;
		end else
		begin
			state <= NS;
		end
	end


always @(posedge CLOCK_50)
begin
	case (state)
	1:
	begin
		cs_reg <= 1'b0; 
		we_reg <= 1'b0;
		oe_reg <= 1'b0;
		NS <= 4'd2;
		
	end
	2:
	begin
		cs_reg <= 1'b1; 
		we_reg <= 1'b1;
		oe_reg <= 1'b0;
		NS <= 4'd3;
		
	end	
	3:
	begin
		cs_reg <= 1'b1; 
		we_reg <= 1'b1;
		oe_reg <= 1'b0;
		NS <= 4'd4;
		
	end	
	4:
	begin
		cs_reg <= 1'b1; 
		we_reg <= 1'b0;
		oe_reg <= 1'b1;
		NS <= 4'd5;
		in_data_reg1 <= dataout;
		//in_data_reg1 <= dataout;
		
	end		
	default:
	begin
		//in_data_reg1 <= dataout;
		cs_reg <= 1'b0; 
		we_reg <= 1'b0;
		oe_reg <= 1'b0;
		address_reg <= address_reg + 1;
		NS <= 4'd5;		
	end
	endcase	
end


endmodule
